// @ts-ignore
/**
 * Shared types for CV processing
 * 
 * This module exports types that are shared between frontend and backend:
 * - Common interfaces
 * - Shared enums
 * - API request/response types
 */

// Common CV processing types
export interface CVData {
  id: string;
  userId: string;
  content: string;
  metadata: CVMetadata;
  status: CVStatus;
  createdAt: Date;
  updatedAt: Date;
}

export interface CVMetadata {
  originalFileName?: string;
  fileSize?: number;
  fileType?: string;
  processingVersion?: string;
  language?: string;
}

export enum CVStatus {
  PENDING = 'pending',
  PROCESSING = 'processing',
  COMPLETED = 'completed',
  FAILED = 'failed'
}

export enum ProcessingType {
  ANALYSIS = 'analysis',
  GENERATION = 'generation',
  ENHANCEMENT = 'enhancement',
  OPTIMIZATION = 'optimization'
}

// API types
export interface ProcessingRequest {
  type: ProcessingType;
  data: any;
  options?: ProcessingOptions;
}

export interface ProcessingResponse {
  success: boolean;
  data?: any;
  error?: string;
  metadata?: BaseProcessingMetadata;
}

export interface ProcessingOptions {
  aiModel?: string;
  language?: string;
  templateId?: string;
  customOptions?: Record<string, any>;
}

export interface BaseProcessingMetadata {
  processingTime?: number;
  tokensUsed?: number;
  version?: string;
  timestamp?: Date;
}

// Core data types
export interface Experience {
  company: string;
  position: string;
  startDate: string;
  endDate?: string;
  location?: string;
  description?: string;
  achievements?: string[];
  technologies?: string[];
}

export interface ParsedCV {
  personalInfo: {
    name?: string;
    email?: string;
    phone?: string;
    location?: string;
  };
  summary?: string;
  experience: {
    company: string;
    position: string;
    startDate?: string;
    endDate?: string;
    location?: string;
    description?: string;
    achievements?: string[];
    technologies?: string[];
  }[];
  education: any[];
  skills: string[];
  languages?: string[];
  certifications?: any[];
  projects?: any[];
}

// Request/Response interfaces
export interface IndustryOptimizationRequest {
  cvData: CVData;
  userId?: string;
  targetIndustry?: string;
  targetRole?: string;
  experienceLevel?: string;
  region?: string;
}

export interface RegionalOptimizationRequest {
  cvData: CVData;
  userId?: string;
  targetRegion?: string;
  targetCountry?: string;
  industry?: string;
}

export interface PredictionRequest {
  cvData: CVData;
  userId?: string;
  jobData?: {
    title: string;
    industry: string;
    location: string;
  };
}

// Result interfaces
export interface ATSOptimizationResult {
  score: number;
  recommendations: string[];
  insights: any;
  optimizations: any[];
  overall: {
    score: number;
    grade: string;
    issues: string[];
  };
}

export interface PersonalityInsights {
  traits: PersonalityTrait[];
  workStyle: WorkStyleProfile;
  data?: {
    traits: PersonalityTrait[];
    workStyle: WorkStyleProfile;
  };
}

export interface PersonalityTrait {
  name: string;
  score: number;
  description: string;
}

export interface WorkStyleProfile {
  leadership: number;
  teamwork: number;
  independence: number;
  communication: number;
}